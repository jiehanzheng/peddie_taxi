//= require jquery.hoverIntent

window.PeddieTaxi ||= {}

$ ->
  # check if we actually have somewhere to put our map
  if not $(".map").length
    throw new Error("You loaded map.js but don't have a container on your page")


bootstrapMap = () ->
  console.log "Google Maps JavaScript API has finished loading.  Prepaing map..."

  jqMap = $(".map")
  PeddieTaxi.jqMap = jqMap

  # controls: display/hide certain map controls
  if $(".map").data("disable-default-ui")
    disableDefaultUI = true
    panControl = $(".map").data("pan-control")
    zoomControl = $(".map").data("zoom-control")
    mapTypeControl = $(".map").data("maptype-control")
    scaleControl = $(".map").data("scale-control")
    streetViewControl = $(".map").data("streetview-control")
    overviewMapControl = $(".map").data("overviewmap-control")

  # default values
  disableDefaultUI ?= false
  streetViewControl ?= true
  overviewMapControl ?= false

  # obtain base coordinates from HTML attribute on .venue-list
  $(".map").data "base-lat-long", new google.maps.LatLng $(".map").data("base-latitude"), 
                                                         $(".map").data("base-longitude")

  mapOptions = {
    center: $(".map").data "base-lat-long"
    # TODO: implement automatic zooming based on most markers
    zoom: 13
    mapTypeId: google.maps.MapTypeId.ROADMAP
    disableDefaultUI: disableDefaultUI
    panControl: panControl
    zoomControl: zoomControl
    mapTypeControl: mapTypeControl
    scaleControl: scaleControl
    streetViewControl: streetViewControl
    overviewMapControl: overviewMapControl }
  
  map = new google.maps.Map $(".map").get(0), mapOptions
  PeddieTaxi.map = map
  
  # make a marker for base first
  $(".map").data "base-marker", new google.maps.Marker {
    position: $(".map").data("base-lat-long")
    map: map
    title: "Peddie"
    icon: new google.maps.MarkerImage( "<%= asset_path('visual-case.it/gmaps_casetta_yellow_a1624.png') %>",
                                       new google.maps.Size(32, 32),
                                       new google.maps.Point(0,0),    # origin
                                       new google.maps.Point(16,24) ) # anchor
    shadow: new google.maps.MarkerImage( "<%= asset_path('visual-case.it/gmaps_casettas.png') %>",
                                         new google.maps.Size(59, 32),
                                         new google.maps.Point(0,0),      # origin
                                         new google.maps.Point(16,27) ) } # anchor

  console.log "Done adding Base marker."

  PeddieTaxi.do_action 'map_instantiated'

  # venues#index
  locationListItemsSync jqMap, map

  # venues#new
  # venues#edit
  draggableMarker jqMap, map

  # venues#new
  # venues#edit
  hybridSwitchLink jqMap, map
  
  # venues#new
  # venues#edit
  removeParentUponClick jqMap, map

  # venues#new
  # venues#edit
  placePinAtAddress jqMap, map

  # venues#new
  # venues#edit
  autocomplete jqMap, map

  # venues#show
  requestDirection jqMap, map


# expose bootstrapMap() to the window
# in order for Google to call us back when it's done loading
PeddieTaxi.bootstrapMap = bootstrapMap

# load Google libs
jQuery.getScript "//maps.googleapis.com/maps/api/js?v=3.11&libraries=places&key=<%= Settings.google.api.simple.key %>&sensor=false&callback=PeddieTaxi.bootstrapMap", ->
  console.log "Google Maps JavaScript API is starting to load itself."


draggableMarker = (jqMap, map) ->
  if $('.map').data 'enable-draggable-marker'

    # FIXME: if synced field already has a value, drop the marker there
    markerLagLng = new google.maps.LatLng jqMap.data("base-latitude") + 0.001, 
                                          jqMap.data("base-longitude") - 0.001

    marker = new google.maps.Marker {
      position: markerLagLng
      map: map
      title: jqMap.data 'draggable-marker-title'
      draggable: true
      animation: google.maps.Animation.DROP }

    google.maps.event.addListener marker, 'position_changed', ->
      $(jqMap.data 'draggable-marker-sync-lat').val marker.getPosition().lat()
      $(jqMap.data 'draggable-marker-sync-lon').val marker.getPosition().lng()

    jqMap.data 'draggable-marker-handle', marker

locationListItemsSync = (jqMap, map) ->
  geoDataSource = $(".map-data-source")

  geoDataSource.find(".venue-list_item").each ->
    console.log "Adding marker from HTML data..."

    # tranfer lat,long data to an object, for use with Google Maps JavaScript API
    $(this).data "lat-long", new google.maps.LatLng $(this).data("latitude"), 
                                                    $(this).data("longitude")

    # make marker
    $(this).data "marker", new google.maps.Marker {
      position: $(this).data("lat-long")
      map: map
      title: $(this).data("name")
      animation: google.maps.Animation.DROP }

    # 
    # marker bounce
    #
    # bind hover event to item, in order to display relevant information 
    # when item is being hovered
    $(this).hoverIntent(
      ->
        console.log "marker bounce: hover"
        $(this).data("marker").setAnimation google.maps.Animation.BOUNCE

      ->
        console.log "marker bounce: leave"
        $(this).data("marker").setAnimation null
    )

hybridSwitchLink = (jqMap, map) ->
  $("a.switch-to-hybrid-view").click ->
    map.setMapTypeId(google.maps.MapTypeId.HYBRID)
    $(this).parent().slideUp("slow")

removeParentUponClick = (jqMap, map) ->
  # if a user clicks on a link, it means that he is aware of the help-block,
  # then remove it to save space
  $(".remove-parent-upon-click").click ->
    $(this).parent().slideUp("slow")

placePinAtAddress = (jqMap, map) ->
  $("a.btn.place-pin-at-address").click ->
    geocoder = new google.maps.Geocoder()

    street = $($(this).data 'source-street').val()
    city = $($(this).data 'source-city').val()

    console.log "Looking up #{street}, #{city}"

    geocoder.geocode { 'address': "#{street}, #{city}" }, (results, status) =>
      if google.maps.GeocoderStatus.OK == status
        map.setCenter results[0].geometry.location
        jqMap.data('draggable-marker-handle').setPosition results[0].geometry.location
        fitMarkers map, [jqMap.data("base-marker").getPosition(), jqMap.data('draggable-marker-handle').getPosition()]
        jqMap.data('draggable-marker-handle').setAnimation google.maps.Animation.BOUNCE
      else
        errorAlert = """
                     <div class="alert alert-error">
                     <button type="button" 
                             class="close" 
                             data-dismiss="alert">&times;</button>
                     <strong>Error:</strong> #{status}
                     """
        
        $(this).parent().prepend( errorAlert )

autocomplete = (jqMap, map) ->
  autocompleteBounds = new google.maps.LatLngBounds(
    new google.maps.LatLng( <%= Settings.geo.boundaries.autocomplete.latlon1.latitude %>,
                            <%= Settings.geo.boundaries.autocomplete.latlon1.longitude %> ),
    new google.maps.LatLng( <%= Settings.geo.boundaries.autocomplete.latlon2.latitude %>,
                            <%= Settings.geo.boundaries.autocomplete.latlon2.longitude %> ) )

  $("[data-enable-autocomplete=true]").each -> 
    autocomplete = new google.maps.places.Autocomplete this, {
      bounds: autocompleteBounds
      types: [ $(this).data 'autocomplete-type' ] }

    if "draw" == $(this).data 'autocomplete-callback-behavior'
      google.maps.event.addListener autocomplete, 'place_changed', ->
        place = autocomplete.getPlace()

        directionsService = new google.maps.DirectionsService()
        directionsDisplay = new google.maps.DirectionsRenderer()
        directionsDisplay.setMap map

        directionsService.route {
          origin: jqMap.data "base-lat-long"
          destination: place.geometry.location
          travelMode: google.maps.TravelMode.DRIVING }, (response, status) ->
          if status is google.maps.DirectionsStatus.OK 
            directionsDisplay.setDirections response
          else
            errorAlert = """
                         <div class="alert alert-error">
                         <button type="button" 
                                 class="close" 
                                 data-dismiss="alert">&times;</button>
                         <strong>Error:</strong> #{status}
                         """        
            $(this).parent().prepend( errorAlert )

requestDirection = (jqMap, map) ->
  if jqMap.data("enable-direction")
    directionDestinationSelector = jqMap.data 'destination-selector'

    directionsService = new google.maps.DirectionsService()
    directionsDisplay = new google.maps.DirectionsRenderer()

    # listen to click event on the radio buttons
    $(jqMap.data 'travel-mode-selector').click ->
      travelMode = $(this).val()
      $(this).addClass "active"
      $(this).siblings().removeClass "active"

      if travelMode
        $(jqMap.data 'hide-once-travel-mode-is-selected').slideUp 'slow'

        directionsDisplay.setMap map

        if jqMap.data 'enable-direction-display'
          directionsDisplay.setPanel $("#directions_panel").get(0)

        directionsService.route {
          origin: jqMap.data "base-lat-long"
          destination: $(directionDestinationSelector).data "lat-long"
          travelMode: google.maps.TravelMode[travelMode] }, (response, status) ->
          if status is google.maps.DirectionsStatus.OK
            directionsDisplay.setDirections response
          else
            errorAlert = """
                         <div class="alert alert-error">
                         <button type="button" 
                                 class="close" 
                                 data-dismiss="alert">&times;</button>
                         <strong>Error:</strong> #{status}
                         """
          
            $(this).parent().prepend( errorAlert )
      else
        console.log "No travel mode was selected."



fitMarkers = (map, positions) ->
  bounds = new google.maps.LatLngBounds()
  bounds.extend position for position in positions
  map.fitBounds(bounds)
